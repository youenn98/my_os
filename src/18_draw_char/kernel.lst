     1                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7C00      ;//boot程序加载地址
     2                              <1> BOOT_SIZE equ (1024 * 8)  ;//boot代码段大小
     3                              <1> BOOT_END  equ (BOOT_LOAD + BOOT_SIZE) ;
     4                              <1> 
     5                              <1> SECT_SIZE equ (512)       ;//sector大小
     6                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ;//boot的sector数
     7                              <1> 
     8                              <1> E820_RECORD_SIZE equ 20
     9                              <1> 
    10                              <1> KERNEL_LOAD equ 0x0010_1000
    11                              <1> KERNEL_SIZE equ (1024*8) ;//kernel的大小仍然是8k
    12                              <1> KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)
     2                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist  ;//1-*是一个以上的参数
     2                              <1> 
     3                              <1> 	%rep %0 - 1         ;//%0是参数的个数
     4                              <1> 		push %{-1:-1}  ;//%将参数倒着压栈
     5                              <1> 		%rotate -1   
     6                              <1> 	%endrep
     7                              <1> 	%rotate -1      ;//恢复原来的参数
     8                              <1> 
     9                              <1> 	call %1
    10                              <1> 	%if 1 < %0
    11                              <1> 		add sp,(__BITS__ >> 3)*(%0 - 1)     ;//__BITS__是表示16比特模式还是32比特模式
    12                              <1> 	%endif									;//给每个参数分配栈空间
    13                              <1> %endmacro
    14                              <1> 
    15                              <1> struc drive
    16 00000000 <res 00000002>      <1> 	.no resw 1	 ;驱动号
    17 00000002 <res 00000002>      <1> 	.cyln resw 1 ;cylinder
    18 00000004 <res 00000002>      <1> 	.head resw 1 ;head
    19 00000006 <res 00000002>      <1> 	.sect resw 1 ;sector
    20                              <1> endstruc
    21                              <1> 
     3                                  	
     4                                  	ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]
     7                                  ;*******************
     8                                  ;entry  point
     9                                  ;*******************
    10                                  kernel:
    11                                  	;----------------------
    12                                  	;获取font address
    13                                  	;----------------------
    14 00000000 BE007E0000              	mov esi,BOOT_LOAD + SECT_SIZE ;ESI = 0x7C00 + 512
    15 00000005 0FB706                  	movzx eax,word[esi + 0]				;//eax = segment
    16 00000008 0FB75E02                	movzx ebx,word[esi + 2]				;//ebx = offset
    17 0000000C C1E004                  	shl eax,4
    18 0000000F 01D8                    	add eax,ebx
    19 00000011 A3[90000000]            	mov [FONT_ADR],eax					;FONT_ADR[0] = eax
    20                                  
    21                                  	;------------------------------
    22                                  	;表示文字
    23                                  	;------------------------------
    24 00000016 6A41680F0100006A00-     	cdecl draw_char, 0,0,0x010F,'A'
    24 0000001F 6A00E8210100006683-
    24 00000028 C410               
    25 0000002A 6A42680F0100006A00-     	cdecl draw_char, 1,0,0x010F,'B'
    25 00000033 6A01E80D0100006683-
    25 0000003C C410               
    26 0000003E 6A43680F0100006A00-     	cdecl draw_char, 2,0,0x010F,'C'
    26 00000047 6A02E8F90000006683-
    26 00000050 C410               
    27                                  
    28 00000052 6A3068020400006A01-     	cdecl draw_char, 0,1,0x0402,'0'
    28 0000005B 6A00E8E50000006683-
    28 00000064 C410               
    29 00000066 6A3168120200006A01-     	cdecl draw_char, 1,1,0x0212,'1'
    29 0000006F 6A01E8D10000006683-
    29 00000078 C410               
    30 0000007A 6A5F68120200006A01-     	cdecl draw_char, 2,1,0x0212,'_'
    30 00000083 6A02E8BD0000006683-
    30 0000008C C410               
    31 0000008E EBFE                    	jmp $
    32                                  
    33                                  ALIGN 4,db 0
    34 00000090 00000000                FONT_ADR: dd 0
    35                                  
    36                                  
    37                                  ;*************************
    38                                  ;model
    39                                  ;*************************
    40                                  %include "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 	
     3 00000094 55                  <1> 		push	ebp	
     4 00000095 89E5                <1> 		mov		ebp, esp						
     5                              <1> 
     6 00000097 50                  <1> 		push	eax
     7 00000098 52                  <1> 		push	edx
     8                              <1> 
     9                              <1> 		;---------------------------------------
    10                              <1> 		;选择读取的plane
    11                              <1> 		;---------------------------------------
    12 00000099 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = 指定读取的palne(----RGB)
    13 0000009C 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // mask掉不要的bit
    14 0000009F B004                <1> 		mov		al, 0x04						; AL  = 读取map选择寄存器
    15 000000A1 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = 图像控制端口
    16 000000A5 66EF                <1> 		out		dx, ax							; // 端口输出
    17                              <1> 
    18 000000A7 5A                  <1> 		pop		edx
    19 000000A8 58                  <1> 		pop		eax
    20 000000A9 89EC                <1> 		mov		esp, ebp
    21 000000AB 5D                  <1> 		pop		ebp
    22                              <1> 
    23 000000AC C3                  <1> 		ret
    24                              <1> 
    25                              <1> vga_set_write_plane:
    26                              <1> 											
    27 000000AD 55                  <1> 		push	ebp								
    28 000000AE 89E5                <1> 		mov		ebp, esp						
    29                              <1> 											
    30 000000B0 50                  <1> 		push	eax
    31 000000B1 52                  <1> 		push	edx
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 选择写入的plane
    35                              <1> 		;---------------------------------------
    36 000000B2 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 指定写入的plane(Bit:----IRGB)
    37 000000B5 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // mask掉不需要的比特
    38 000000B8 B002                <1> 		mov		al, 0x02						; AL = 指定写入plane
    39 000000BA 66BAC403            <1> 		mov		dx, 0x03C4						; DX = sequence控制端口
    40 000000BE 66EF                <1> 		out		dx, ax							; // 端口输出
    41                              <1> 
    42                              <1> 
    43 000000C0 5A                  <1> 		pop		edx
    44 000000C1 58                  <1> 		pop		eax
    45                              <1> 
    46 000000C2 89EC                <1> 		mov		esp, ebp
    47 000000C4 5D                  <1> 		pop		ebp
    48                              <1> 
    49 000000C5 C3                  <1> 		ret
    50                              <1> 
    51                              <1> ;
    52                              <1> vram_font_copy:
    53                              <1> 
    54                              <1> 
    55 000000C6 55                  <1> 		push	ebp							
    56 000000C7 89E5                <1> 		mov		ebp, esp						
    57                              <1> 
    58 000000C9 50                  <1> 		push	eax
    59 000000CA 53                  <1> 		push	ebx
    60 000000CB 51                  <1> 		push	ecx
    61 000000CC 52                  <1> 		push	edx
    62 000000CD 56                  <1> 		push	esi
    63 000000CE 57                  <1> 		push	edi
    64                              <1> 
    65                              <1> 		;---------------------------------------
    66                              <1> 		; 获取参数
    67                              <1> 		;---------------------------------------
    68 000000CF 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = font地址
    69 000000D2 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAM地址;
    70 000000D5 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = plane(用比特指定);
    71 000000D9 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 颜色;
    72                              <1> 
    73                              <1> 		;//背景色或者前景色包含plane的时候设置为0xff,不包含的时候设置为0x00
    74                              <1> 
    75 000000DD 84C7                <1> 		test	bh, al							; ZF = (背景色 & plane);
    76 000000DF 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
    77 000000E2 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
    78                              <1> 
    79 000000E4 84C3                <1> 		test	bl, al							; ZF = (前景色 & plane);
    80 000000E6 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
    81 000000E9 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 复制16个点的font
    85                              <1> 		;---------------------------------------
    86 000000EB FC                  <1> 		cld										; DF  = 0; 
    87                              <1> 
    88 000000EC B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16个点
    89                              <1> .10L:											; do
    90                              <1> 												; {
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 生成font_mask
    93                              <1> 		;---------------------------------------
    94 000000F1 AC                  <1> 		lodsb									;   AL  = *ESI++; //  font
    95 000000F2 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !font(比特反转)
    96 000000F4 F6D4                <1> 		not		ah								;   
    97                              <1> 
    98                              <1> 		;---------------------------------------
    99                              <1> 		; 前景色
   100                              <1> 		;---------------------------------------
   101 000000F6 20D0                <1> 		and		al, dl							;   AL =前景色 & font;
   102                              <1> 
   103                              <1> 		;---------------------------------------
   104                              <1> 		; 背景色
   105                              <1> 		;---------------------------------------
   106 000000F8 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透明模式)
   107 000000FE 7404                <1> 		jz		.11F							;   {
   108 00000100 2227                <1> 		and		ah, [edi]						;     AH = !font & [EDI] // 现在值
   109 00000102 EB02                <1> 		jmp		.11E							;   }
   110                              <1> .11F:											;   else
   111                              <1> 												;   {
   112 00000104 20F4                <1> 		and		ah, dh							;     AH = !font & 背景色;
   113                              <1> .11E:											;   }
   114                              <1> 
   115                              <1> 		;---------------------------------------
   116                              <1> 		; 前景色和背景色的合成
   117                              <1> 		;---------------------------------------
   118 00000106 08E0                <1> 		or		al, ah							;   AL  = 前景 | 背景;
   119                              <1> 
   120                              <1> 		;---------------------------------------
   121                              <1> 		; 输出新的值
   122                              <1> 		;---------------------------------------
   123 00000108 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // 写入plane
   124                              <1> 
   125 0000010A 83C750              <1> 		add		edi, 80							;   EDI += 80;(font是30x80)
   126 0000010D E2E2                <1> 		loop	.10L							; } while (--ECX);
   127                              <1> .10E:											; 
   128 0000010F 5F                  <1> 		pop		edi
   129 00000110 5E                  <1> 		pop		esi
   130 00000111 5A                  <1> 		pop		edx
   131 00000112 59                  <1> 		pop		ecx
   132 00000113 5B                  <1> 		pop		ebx
   133 00000114 58                  <1> 		pop		eax
   134                              <1> 
   135 00000115 89EC                <1> 		mov		esp, ebp
   136 00000117 5D                  <1> 		pop		ebp
   137                              <1> 
   138 00000118 C3                  <1> 		ret
   139                              <1> 
   140                              <1> vram_bit_copy:
   141                              <1> 
   142 00000119 55                  <1> 		push	ebp							
   143 0000011A 89E5                <1> 		mov		ebp, esp						
   144                              <1> 												
   145 0000011C 50                  <1> 		push	eax
   146 0000011D 53                  <1> 		push	ebx
   147 0000011E 57                  <1> 		push	edi
   148                              <1> 
   149                              <1> 		;---------------------------------------
   150                              <1> 		; 获取参数
   151                              <1> 		;---------------------------------------
   152 0000011F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAM地址
   153 00000122 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = palne(bit);
   154 00000126 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示颜色;
   155                              <1> 
   156 0000012A 84C3                <1> 		test	bl, al							; ZF = (前景色 & plane);
   157 0000012C 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   158 0000012F FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 输出比特模式的反
   162                              <1> 		;---------------------------------------
   163 00000131 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 输出比特模式
   164 00000134 88C4                <1> 		mov		ah, al							; AH ~= AL;     // ! 输出比特模式
   165 00000136 F6D4                <1> 		not		ah								; 
   166                              <1> 
   167                              <1> 		;---------------------------------------
   168                              <1> 		; 生成输入的值
   169                              <1> 		;---------------------------------------
   170 00000138 2227                <1> 		and		ah, [edi]						; AH  =  ! 输出比特模式 & 现在值
   171 0000013A 20D8                <1> 		and		al, bl							; AL  = 输出比特模式 &  表示色
   172 0000013C 08E0                <1> 		or		al, ah							; AL |= AH;
   173                              <1> 
   174                              <1> 		;---------------------------------------
   175                              <1> 		; 数据写入
   176                              <1> 		;---------------------------------------
   177 0000013E 8807                <1> 		mov		[edi], al						; [EDI] = BL; // 写入palne
   178                              <1> 
   179                              <1> 
   180 00000140 5F                  <1> 		pop		edi
   181 00000141 5B                  <1> 		pop		ebx
   182 00000142 58                  <1> 		pop		eax
   183                              <1> 
   184 00000143 89EC                <1> 		mov		esp, ebp
   185 00000145 5D                  <1> 		pop		ebp
   186                              <1> 
   187 00000146 C3                  <1> 		ret
   188                              <1> 
    41                                  %include "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3 00000147 55                  <1> 		push	ebp			
     4 00000148 89E5                <1> 		mov		ebp, esp	
     5                              <1> 											
     6                              <1> 
     7 0000014A 50                  <1> 		push	eax
     8 0000014B 53                  <1> 		push	ebx
     9 0000014C 51                  <1> 		push	ecx
    10 0000014D 52                  <1> 		push	edx
    11 0000014E 56                  <1> 		push	esi
    12 0000014F 57                  <1> 		push	edi
    13                              <1> 
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 取得参数
    16                              <1> 		;---------------------------------------
    17 00000150 0FB67514            <1> 		movzx	esi, byte [ebp +20]				; ESI  = 字符码
    18 00000154 C1E604              <1> 		shl		esi, 4							; CL *= 16; // 1字符16byte
    19 00000157 0335[90000000]      <1> 		add		esi, [FONT_ADR]					; ESI = font地址;
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 取得复制目的地的地址
    23                              <1> 		; Adr = 0xA0000 + (640 / 8 * 16) * y + x
    24                              <1> 		;---------------------------------------
    25 0000015D 8B7D0C              <1> 		mov		edi, [ebp +12]					; Y(行)
    26 00000160 C1E708              <1> 		shl		edi, 8							; EDI = Y * 256;
    27 00000163 8DBCBF00000A00      <1> 		lea		edi, [edi * 4 + edi + 0xA0000]	; EDI = Y *   4 + Y;
    28 0000016A 037D08              <1> 		add		edi, [ebp + 8]					; X(列)
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; 输出一字符的font
    32                              <1> 		;---------------------------------------
    33 0000016D 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 颜色
    34                              <1> 
    35 00000171 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 写入plane(亮度:I)
    35 0000017A C404                <1>
    36 0000017C 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 输出plane(亮度:I)
    36 00000185 C404                <1>
    37 00000187 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
    37 00000190 FF6683C410          <1>
    38                              <1> 
    39 00000195 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; //写入plane(红:R)
    39 0000019E C404                <1>
    40 000001A0 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; //输出plane(红:R)
    40 000001A9 C404                <1>
    41 000001AB 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
    41 000001B4 FF6683C410          <1>
    42                              <1> 
    43 000001B9 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 写入plane(绿:G)
    43 000001C2 C404                <1>
    44 000001C4 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 输出plane(绿:G)
    44 000001CD C404                <1>
    45 000001CF 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
    45 000001D8 FF6683C410          <1>
    46                              <1> 
    47 000001DD 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 写入plane(蓝:B)
    47 000001E6 C404                <1>
    48 000001E8 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 输出plane(蓝:B)
    48 000001F1 C404                <1>
    49 000001F3 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
    49 000001FC FF6683C410          <1>
    50                              <1> 
    51                              <1> 
    52 00000201 5F                  <1> 		pop		edi
    53 00000202 5E                  <1> 		pop		esi
    54 00000203 5A                  <1> 		pop		edx
    55 00000204 59                  <1> 		pop		ecx
    56 00000205 5B                  <1> 		pop		ebx
    57 00000206 58                  <1> 		pop		eax
    58                              <1> 
    59 00000207 89EC                <1> 		mov		esp, ebp
    60 00000209 5D                  <1> 		pop		ebp
    61                              <1> 
    62 0000020A C3                  <1> 		ret
    63                              <1> 
    42                                  
    43                                  
    44                                  
    45                                  ;********************
    46                                  ;padding
    47                                  ;********************
    48 0000020B 00<rept>                	times KERNEL_SIZE -($-$$) db 0;
