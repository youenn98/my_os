int_nm:

		pusha
		push	ds
		push	es

		;---------------------------------------
		; 设定segment selector
		;---------------------------------------
		mov		ax, DS_KERNEL					;
		mov		ds, ax							;
		mov		es, ax							;

		;---------------------------------------
		; task switch flag clear
		;---------------------------------------
		clts									; CR0.TS = 0;

		;---------------------------------------
		; 前一次/后一次FPU初次利用
		;---------------------------------------
		mov		edi, [.last_tss]				; EDI = 前一次FPU的使用的TSS
		str		esi								; ESI = 这次FPU使用的任务的TSS
		and		esi, ~0x0007					; // 将特权level mask

		;---------------------------------------
		; FPU的初次前后文保存
		;---------------------------------------
		cmp		edi, 0							; if (0 != EDI)     //之前的任务
		je		.10F							; {
												;   
		cmp		esi, edi						;   if (ESI != EDI) //不同的任务
		je		.12E							;   {
												;     
		cli										;     // 禁止中断

		;---------------------------------------
		; 保存上一次的FPU前后文
		;---------------------------------------
		mov		ebx, edi						;     // 前一次的
		call	get_tss_base					;     // TSS address取得
		call	save_fpu_context				;     // FPU的前后文保存

		;---------------------------------------
		; 这一的FPU前后文恢复
		;---------------------------------------
		mov		ebx, esi						;     // 这次的任务
		call	get_tss_base					;     // TSS address的取得
		call	load_fpu_context				;     // FPU的前后文恢复
												;     
		sti										;     // 允许中断
.12E:											;   }
		jmp		.10E							; }
.10F:											; else
												; {
												;   
		cli										;   // 禁止中断

		;---------------------------------------
		; 这次的FPU前后文恢复
		;---------------------------------------
		mov		ebx, esi						;   // 这次的任务
		call	get_tss_base					;   // TSS地址取得
		call	load_fpu_context				;   // FPU前后文恢复
												;   
		sti										;   // 允许中断
.10E:											; }
												; 
		mov		[.last_tss], esi				; // 将使用FPU的task保存起来

		pop		es
		pop		ds
		popa

		iret

ALIGN 4, db 0
.last_tss:	dd		0

;************************************************************************
;	EBX : 传入参数
;************************************************************************
get_tss_base:
		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
		shl		eax, 8							; EAX <<= 8;
        mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
		ror		eax, 8							; EAX >>= 8;

		ret

;************************************************************************
; FPU上下文保存
;------------------------------------------------------------------[IN]--
;	EAX : TSS地址参数
;************************************************************************
save_fpu_context:
		fnsave	[eax + 104]						; // 保存FPU上下文
		mov		[eax + 104 + 108], dword 1		; saved = 1;

		ret

;************************************************************************
; FPU上下文恢复
;------------------------------------------------------------------[IN]--
;EAX : TSS地址参数
;************************************************************************
load_fpu_context:
		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
		jne		.10F							; {
		fninit									;    // FPU初始化
		jmp		.10E							; }
.10F:											; else
												; {
		frstor	[eax + 104]						;   // 恢复FPU上下文
.10E:											; }
		ret

